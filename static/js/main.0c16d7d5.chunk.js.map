{"version":3,"sources":["ui/blocks/operational/value/ValueBlocks.tsx","ui/blocks/Block.tsx","store/hooks.ts","store/BlocksSlice.tsx","ui/panels/BlockPanel.tsx","store/store.ts","index.js"],"names":["BooleanBlock","val","useState","value","setValue","menu","Item","onClick","backgroundColour","type","displayText","internal","wrap","Button","placement","icon","DownOutlined","overlay","TypeBlockRender","props","style","display","displayStyle","background","block","alignSelf","userSelect","color","displayTextColour","BlockRender","xPos","setXPos","yPos","setYPos","xOffsetPos","setXOffsetPos","yOffsetPos","setYOffsetPos","left","top","justifyContent","cursor","className","onDrag","event","pageX","pageY","console","log","onMouseDown","nativeEvent","offsetX","offsetY","useAppSelector","useSelector","blocksSlice","createSlice","name","initialState","reducers","set","state","action","payload","append","remove","filter","id","actions","blocks","BlockList","mode","theme","height","borderRight","title","BlockMenuItem","dispatch","useDispatch","key","BlockArea","map","Page","width","store","configureStore","reducer","BlocksSlice","ReactDOM","render","StrictMode","BlockPanel","document","getElementById"],"mappings":"6PAKO,SAASA,EAAaC,GAC3B,MAA0BC,mBAASD,GAAnC,mBAAOE,EAAP,KAAcC,EAAd,KAEMC,EACJ,eAAC,IAAD,WACE,cAAC,IAAKC,KAAN,CAAmBC,QAAS,kBAAMH,GAAS,IAA3C,iBAAe,KAGf,cAAC,IAAKE,KAAN,CAAmBC,QAAS,kBAAMH,GAAS,IAA3C,kBAAe,QAMnB,MAAO,CACLI,iBAAkB,SAClBC,KAAM,eACNC,YAAa,QACbC,SAAU,WACR,OACE,cAAC,IAAD,CAAOC,MAAI,EAAX,SACE,cAAC,IAASC,OAAV,CACEC,UAAW,eACXC,KAAM,cAACC,EAAA,EAAD,IACNC,QAASZ,EAHX,SAKGF,EAAQ,QAKjBA,SCfG,SAASe,EAAgBC,GAC9B,IAAMC,EAAK,2BACND,EAAMC,OADA,IAETC,QAAS,OACTC,aAAc,eACdC,WAAYJ,EAAMK,MAAMhB,mBAGpBG,EAAWQ,EAAMK,MAAMb,SAE7B,OACE,sBAAKS,MAAOA,EAAZ,UACE,mBACEA,MAAO,CACLK,UAAW,SACXC,WAAY,OAEdC,MAAOR,EAAMK,MAAMI,kBALrB,SAOGT,EAAMK,MAAMd,cAEdC,EAAWA,IAAa,gCAKxB,SAASkB,EAAYV,GAC1B,MAAwBjB,mBAAS,GAAjC,mBAAO4B,EAAP,KAAaC,EAAb,KACA,EAAwB7B,mBAAS,GAAjC,mBAAO8B,EAAP,KAAaC,EAAb,KACA,EAAoC/B,mBAAS,GAA7C,mBAAOgC,EAAP,KAAmBC,EAAnB,KACA,EAAoCjC,mBAAS,GAA7C,mBAAOkC,EAAP,KAAmBC,EAAnB,KAEMjB,EAAK,2BACND,EAAMC,OADA,IAETkB,KAAMR,EACNS,IAAKP,EACLV,aAAc,eACdD,QAAS,cACTmB,eAAgB,OAChBjB,WAAYJ,EAAMK,MAAMhB,iBACxBiC,OAAQ,SAYJ9B,EAAWQ,EAAMK,MAAMb,SAE7B,OACE,sBACE+B,UAAW,eACXC,OAdW,SAACC,GACVA,EAAMC,OAAS,KAAOD,EAAME,OAAS,IAGzCC,QAAQC,IAAI,MAAQJ,EAAMC,MAAQ,SAAWD,EAAME,OACnDf,EAAQa,EAAMC,MAAQ,IAAMX,GAC5BD,EAAQW,EAAME,MAAQV,KASpBhB,MAAOA,EACP6B,YAAa,SAACL,GACZT,EAAcS,EAAMM,YAAYC,SAChCd,EAAcO,EAAMM,YAAYE,UANpC,UASE,mBACEhC,MAAO,CACLK,UAAW,SACXC,WAAY,OAEdC,MAAOR,EAAMK,MAAMI,kBALrB,SAOGT,EAAMK,MAAMd,cAEdC,EAAWA,IAAa,gC,6BC1FlB0C,EAAkDC,I,gBCQlDC,EAAcC,YAAY,CACrCC,KAAM,SACNC,aANgC,CAChCvD,MAAO,IAMPwD,SAAU,CACRC,IAAK,SAACC,EAAOC,GACXD,EAAM1D,MAAQ2D,EAAOC,SAEvBC,OAAQ,SAACH,EAAOC,GACdD,EAAM1D,MAAN,sBAAkB0D,EAAM1D,OAAxB,CAA+B2D,EAAOC,WAExCE,OAAQ,SAACJ,EAAOC,GACdD,EAAM1D,MAAQ0D,EAAM1D,MAAM+D,QAAO,SAAC/D,GAAD,OAAW2D,EAAOC,UAAY5D,EAAMgE,UAKpE,EAAgCZ,EAAYa,QAA/BJ,GAAb,EAAQJ,IAAR,EAAaI,QAEPK,GAFN,EAAqBJ,OAEN,SAACJ,GAAD,OAAsBA,EAAMQ,OAAOlE,QAE1CoD,IAAf,QCtBA,SAASe,IACP,OACE,cAAC,IAAD,CAAMC,KAAK,SAASC,MAAM,OAAOpD,MAAO,CAAEqD,OAAQ,OAAQC,YAAa,GAAvE,SACE,cAAC,IAAD,CAAqBC,MAAM,QAA3B,SACE,cAACC,EAAD,CACET,GAAI,EAEJQ,MAAM,aACNnD,MAAOxB,GAAa,IAFhB,iBAHK,WAiBnB,SAAS4E,EAAczD,GACrB,IAAM0D,EF5B4BC,cE8BlC,OACE,cAAC,IAAKxE,KAAN,CAEEqE,MAAOxD,EAAMwD,MACbpE,QAAS,WACPsE,EAASb,EAAO,eAAK7C,MAJzB,SAOE,cAACD,EAAD,eAAqBC,KANhBA,EAAM4D,KAWjB,SAASC,IACP,IAAMnB,EAAQR,EAAegB,GAE7B,OACE,mCACGR,EAAMoB,KAAI,SAAC9D,GAAD,OACT,cAACU,EAAD,eAAgCV,GAAdA,EAAMgD,SAmBjBe,MAbf,WACE,OACE,sBAAK9D,MAAO,CAAEC,QAAS,QAAvB,UACE,qBAAKD,MAAO,CAAE+D,MAAO,SAArB,SACE,cAACb,EAAD,MAEF,qBAAKlD,MAAO,CAAE+D,MAAO,QAArB,SACE,cAACH,EAAD,UCtDOI,EATDC,YAAe,CAC3BC,QAAS,CACPjB,OAAQkB,K,YCKZC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,IAAMM,WAAP,UACE,cAACC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.0c16d7d5.chunk.js","sourcesContent":["import { ValueBlock } from \"../../Block\";\r\nimport { useState } from \"react\";\r\nimport { Menu, Dropdown, Space } from \"antd\";\r\nimport { DownOutlined } from \"@ant-design/icons\";\r\n\r\nexport function BooleanBlock(val: boolean): ValueBlock<boolean> {\r\n  const [value, setValue] = useState(val);\r\n\r\n  const menu = (\r\n    <Menu>\r\n      <Menu.Item key=\"1\" onClick={() => setValue(true)}>\r\n        True\r\n      </Menu.Item>\r\n      <Menu.Item key=\"2\" onClick={() => setValue(false)}>\r\n        False\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  return {\r\n    backgroundColour: \"yellow\",\r\n    type: \"booleanValue\",\r\n    displayText: \"Value\",\r\n    internal: () => {\r\n      return (\r\n        <Space wrap>\r\n          <Dropdown.Button\r\n            placement={\"bottomCenter\"}\r\n            icon={<DownOutlined />}\r\n            overlay={menu}\r\n          >\r\n            {value + \"\"}\r\n          </Dropdown.Button>\r\n        </Space>\r\n      );\r\n    },\r\n    value,\r\n  };\r\n}\r\n","import { Properties } from \"csstype\";\r\nimport React, { useState } from \"react\";\r\n\r\nexport type Block = {\r\n  type: string;\r\n  displayText: string;\r\n  displayTextColour?: string;\r\n  backgroundColour?: string;\r\n  internal?: () => React.ReactElement;\r\n};\r\n\r\nexport type ValueBlock<V> = Block & {\r\n  value: V;\r\n};\r\n\r\nexport type BlockProps = {\r\n  block: Block;\r\n  id: number;\r\n  style?: Properties;\r\n};\r\n\r\nexport function TypeBlockRender(props: BlockProps) {\r\n  const style = {\r\n    ...props.style,\r\n    display: \"flex\",\r\n    displayStyle: \"inline-block\",\r\n    background: props.block.backgroundColour,\r\n  };\r\n\r\n  const internal = props.block.internal;\r\n\r\n  return (\r\n    <div style={style}>\r\n      <p\r\n        style={{\r\n          alignSelf: \"center\",\r\n          userSelect: \"all\",\r\n        }}\r\n        color={props.block.displayTextColour}\r\n      >\r\n        {props.block.displayText}\r\n      </p>\r\n      {internal ? internal() : <></>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function BlockRender(props: BlockProps) {\r\n  const [xPos, setXPos] = useState(0);\r\n  const [yPos, setYPos] = useState(0);\r\n  const [xOffsetPos, setXOffsetPos] = useState(0);\r\n  const [yOffsetPos, setYOffsetPos] = useState(0);\r\n\r\n  const style = {\r\n    ...props.style,\r\n    left: xPos,\r\n    top: yPos,\r\n    displayStyle: \"inline-block\",\r\n    display: \"inline-flex\",\r\n    justifyContent: \"flex\",\r\n    background: props.block.backgroundColour,\r\n    cursor: \"grab\",\r\n  };\r\n\r\n  const onDrag = (event: React.DragEvent<HTMLDivElement>) => {\r\n    if (event.pageX <= 200 || event.pageY <= 0) {\r\n      return;\r\n    }\r\n    console.log(\"X: \" + event.pageX + \" | Y: \" + event.pageY);\r\n    setXPos(event.pageX - 200 - xOffsetPos);\r\n    setYPos(event.pageY - yOffsetPos);\r\n  };\r\n\r\n  const internal = props.block.internal;\r\n\r\n  return (\r\n    <div\r\n      className={\"absolute-box\"}\r\n      onDrag={onDrag}\r\n      style={style}\r\n      onMouseDown={(event) => {\r\n        setXOffsetPos(event.nativeEvent.offsetX);\r\n        setYOffsetPos(event.nativeEvent.offsetY);\r\n      }}\r\n    >\r\n      <p\r\n        style={{\r\n          alignSelf: \"center\",\r\n          userSelect: \"all\",\r\n        }}\r\n        color={props.block.displayTextColour}\r\n      >\r\n        {props.block.displayText}\r\n      </p>\r\n      {internal ? internal() : <></>}\r\n    </div>\r\n  );\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch, RootState } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { BlockProps } from \"../ui/blocks/Block\";\r\nimport { RootState } from \"./store\";\r\n\r\ninterface BlocksState {\r\n  value: BlockProps[];\r\n}\r\n\r\nconst initialState: BlocksState = {\r\n  value: [],\r\n};\r\n\r\nexport const blocksSlice = createSlice({\r\n  name: \"blocks\",\r\n  initialState,\r\n  reducers: {\r\n    set: (state, action: PayloadAction<BlockProps[]>) => {\r\n      state.value = action.payload;\r\n    },\r\n    append: (state, action: PayloadAction<BlockProps>) => {\r\n      state.value = [...state.value, action.payload];\r\n    },\r\n    remove: (state, action: PayloadAction<number>) => {\r\n      state.value = state.value.filter((value) => action.payload !== value.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { set, append, remove } = blocksSlice.actions;\r\n\r\nexport const blocks = (state: RootState) => state.blocks.value;\r\n\r\nexport default blocksSlice.reducer;\r\n","import { BooleanBlock } from \"../blocks/operational/value/ValueBlocks\";\r\nimport { BlockProps, BlockRender, TypeBlockRender } from \"../blocks/Block\";\r\nimport { Layout, Menu } from \"antd\";\r\nimport Sider from \"antd/lib/layout/Sider\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\nimport SubMenu from \"antd/lib/menu/SubMenu\";\r\nimport { useState } from \"react\";\r\nimport { useAppSelector, useAppDispatch } from \"./../../store/hooks\";\r\nimport { blocks, append } from \"./../../store/BlocksSlice\";\r\n\r\nfunction BlockList(): React.ReactElement {\r\n  return (\r\n    <Menu mode=\"inline\" theme=\"dark\" style={{ height: \"100%\", borderRight: 0 }}>\r\n      <SubMenu key=\"Value\" title=\"Value\">\r\n        <BlockMenuItem\r\n          id={0}\r\n          key=\"booleanBlock\"\r\n          title=\"true/false\"\r\n          block={BooleanBlock(true)}\r\n        />\r\n      </SubMenu>\r\n    </Menu>\r\n  );\r\n}\r\n\r\ntype BlockMenuItemProps = BlockProps & {\r\n  key: string;\r\n  title: string;\r\n};\r\n\r\nfunction BlockMenuItem(props: BlockMenuItemProps) {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <Menu.Item\r\n      key={props.key}\r\n      title={props.title}\r\n      onClick={() => {\r\n        dispatch(append({ ...props }));\r\n      }}\r\n    >\r\n      <TypeBlockRender {...props} />\r\n    </Menu.Item>\r\n  );\r\n}\r\n\r\nfunction BlockArea(): React.ReactElement {\r\n  const state = useAppSelector(blocks);\r\n\r\n  return (\r\n    <>\r\n      {state.map((props) => (\r\n        <BlockRender key={props.id} {...props} />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction Page(): React.ReactElement {\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <div style={{ width: \"200px\" }}>\r\n        <BlockList />\r\n      </div>\r\n      <div style={{ width: \"100%\" }}>\r\n        <BlockArea />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Page;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport BlocksSlice from \"./BlocksSlice\";\r\nconst store = configureStore({\r\n  reducer: {\r\n    blocks: BlocksSlice,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport BlockPanel from \"./ui/panels/BlockPanel\";\r\nimport store from \"./store/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport \"antd/dist/antd.css\";\r\nimport \"./style.css\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <BlockPanel />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}