{"version":3,"sources":["ui/blocks/operational/value/ValueBlocks.ts","ui/blocks/Block.tsx","store/hooks.ts","store/BlocksSlice.tsx","ui/panels/BlockPanel.tsx","store/store.ts","index.js"],"names":["booleanBlock","value","backgroundColour","displayText","displayTextOffsetX","displayTextOffsetY","displayTextColour","type","BlockRender","props","style","marginLeft","block","marginTop","color","draggable","background","useAppSelector","useSelector","initialState","id","posY","posX","blocksSlice","createSlice","name","reducers","set","state","action","payload","append","remove","filter","actions","blocks","BlockList","mode","theme","title","Item","BlockArea","width","height","map","Page","useState","collapsed","setCollapsed","className","collapsible","minHeight","onCollapse","margin","padding","store","configureStore","reducer","BlocksSlice","ReactDOM","render","StrictMode","BlockPanel","document","getElementById"],"mappings":"0LAEO,SAASA,EAAaC,GAC3B,MAAO,CACLC,iBAAkB,SAClBC,YAAa,GAAKF,EAClBG,mBAAoB,EACpBC,mBAAoB,EACpBC,kBAAmB,QACnBC,KAAM,eACNN,S,oBCaG,SAASO,EAAYC,GAC1B,IAAMC,EAAK,2BACND,EAAMC,OADA,IAETC,WAAYF,EAAMG,MAAMR,mBACxBS,UAAWJ,EAAMG,MAAMP,mBACvBS,MAAOL,EAAMG,MAAMN,oBAGrB,OACE,qBACES,WAAS,EACTL,MAAO,CACLM,WAAYP,EAAMG,MAAMV,kBAH5B,SAME,mBAAGQ,MAAOA,EAAV,SAAkBD,EAAMG,MAAMT,gB,wEClCvBc,EAAkDC,I,gBCKzDC,EAA4B,CAChClB,MAAO,CACL,CACEmB,GAAI,EACJR,MAAOZ,GAAa,GACpBqB,KAAM,EACNC,KAAM,KAKCC,EAAcC,YAAY,CACrCC,KAAM,SACNN,eACAO,SAAU,CACRC,IAAK,SAACC,EAAOC,GACXD,EAAM3B,MAAQ4B,EAAOC,SAEvBC,OAAQ,SAACH,EAAOC,GACdD,EAAM3B,MAAN,sBAAkB2B,EAAM3B,OAAxB,CAA+B4B,EAAOC,WAExCE,OAAQ,SAACJ,EAAOC,GACdD,EAAM3B,MAAQ2B,EAAM3B,MAAMgC,QAAO,SAAChC,GAAD,OAAW4B,EAAOC,SAAW7B,EAAMmB,UAKnE,EAAgCG,EAAYW,QAEtCC,GAFN,EAAQR,IAAR,EAAaI,OAAb,EAAqBC,OAEN,SAACJ,GAAD,OAAsBA,EAAMO,OAAOlC,QAE1CsB,IAAf,QC9BA,SAASa,IACP,OACE,cAAC,IAAD,CAAMC,KAAK,SAASC,MAAM,OAA1B,SACE,cAAC,IAAD,CAAqBC,MAAM,QAA3B,SACE,cAAC,IAAKC,KAAN,CAA8BD,MAAM,aAApC,SACE,cAAC/B,EAAD,CAEEY,GAAI,EACJR,MAAOZ,GAAa,GACpBqB,KAAM,EACNC,KAAM,GAJF,iBAFO,iBADJ,WAenB,SAASmB,IACP,IAAMb,EAAQX,EAAekB,GAE7B,OACE,qBAAKzB,MAAO,CAAEgC,MAAO,MAAOC,OAAQ,QAApC,SACGf,EAAMgB,KAAI,SAACnC,GAAD,OAAWD,EAAYC,QAmCzBoC,MA9Bf,WACE,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,UAAU,yBACVC,aAAW,EACXH,UAAWA,EACXT,MAAM,OACN5B,MAAO,CAAEiC,OAAQ,OAAQQ,UAAW,QACpCC,WAAY,kBAAMJ,GAAcD,IANlC,SAQE,cAACX,EAAD,MAEF,cAAC,IAAD,CAAQa,UAAU,cAAlB,SACE,cAAC,UAAD,CACEA,UAAU,yBACVvC,MAAO,CACL2C,OAAQ,YACRC,QAAS,GACTH,UAAW,KALf,SAQE,cAACV,EAAD,YClDKc,EATDC,YAAe,CAC3BC,QAAS,CACPtB,OAAQuB,K,OCIZC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,IAAMM,WAAP,UACE,cAACC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.688850ce.chunk.js","sourcesContent":["import { ValueBlock } from \"./../../Block\";\r\n\r\nexport function booleanBlock(value: boolean): ValueBlock<boolean> {\r\n  return {\r\n    backgroundColour: \"yellow\",\r\n    displayText: \"\" + value,\r\n    displayTextOffsetX: 0,\r\n    displayTextOffsetY: 0,\r\n    displayTextColour: \"black\",\r\n    type: \"booleanValue\",\r\n    value,\r\n  };\r\n}\r\n","import { Properties } from \"csstype\";\r\n\r\nexport type Block = {\r\n  type: String;\r\n  backgroundColour?: string;\r\n  displayText?: string;\r\n  displayTextColour?: string;\r\n  displayTextOffsetX?: number | string;\r\n  displayTextOffsetY?: number | string;\r\n};\r\n\r\nexport type ValueBlock<V> = Block & {\r\n  value: V;\r\n};\r\n\r\nexport type BlockProps = {\r\n  block: Block;\r\n  id: number;\r\n  posX: number;\r\n  posY: number;\r\n  style?: Properties;\r\n};\r\n\r\nexport function BlockRender(props: BlockProps) {\r\n  const style = {\r\n    ...props.style,\r\n    marginLeft: props.block.displayTextOffsetX,\r\n    marginTop: props.block.displayTextOffsetY,\r\n    color: props.block.displayTextColour,\r\n  };\r\n\r\n  return (\r\n    <div\r\n      draggable\r\n      style={{\r\n        background: props.block.backgroundColour,\r\n      }}\r\n    >\r\n      <p style={style}>{props.block.displayText}</p>\r\n    </div>\r\n  );\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch, RootState } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { BlockProps } from \"../ui/blocks/Block\";\r\nimport { RootState } from \"./store\";\r\nimport { booleanBlock } from \"../ui/blocks/operational/value/ValueBlocks\";\r\n\r\ninterface BlocksState {\r\n  value: BlockProps[];\r\n}\r\n\r\nconst initialState: BlocksState = {\r\n  value: [\r\n    {\r\n      id: 0,\r\n      block: booleanBlock(true),\r\n      posY: 0,\r\n      posX: 0,\r\n    },\r\n  ],\r\n};\r\n\r\nexport const blocksSlice = createSlice({\r\n  name: \"blocks\",\r\n  initialState,\r\n  reducers: {\r\n    set: (state, action: PayloadAction<BlockProps[]>) => {\r\n      state.value = action.payload;\r\n    },\r\n    append: (state, action: PayloadAction<BlockProps>) => {\r\n      state.value = [...state.value, action.payload];\r\n    },\r\n    remove: (state, action: PayloadAction<number>) => {\r\n      state.value = state.value.filter((value) => action.payload != value.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { set, append, remove } = blocksSlice.actions;\r\n\r\nexport const blocks = (state: RootState) => state.blocks.value;\r\n\r\nexport default blocksSlice.reducer;\r\n","import { booleanBlock } from \"../blocks/operational/value/ValueBlocks\";\r\nimport { BlockRender } from \"../blocks/Block\";\r\nimport { Layout, Menu } from \"antd\";\r\nimport Sider from \"antd/lib/layout/Sider\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\nimport SubMenu from \"antd/lib/menu/SubMenu\";\r\nimport { useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"./../../store/hooks\";\r\nimport { blocks } from \"./../../store/BlocksSlice\";\r\n\r\nfunction BlockList(): React.ReactElement {\r\n  return (\r\n    <Menu mode=\"inline\" theme=\"dark\">\r\n      <SubMenu key=\"Value\" title=\"Value\">\r\n        <Menu.Item key=\"booleanBlock\" title=\"true/false\">\r\n          <BlockRender\r\n            key=\"booleanBlock\"\r\n            id={0}\r\n            block={booleanBlock(true)}\r\n            posY={0}\r\n            posX={0}\r\n          />\r\n        </Menu.Item>\r\n      </SubMenu>\r\n    </Menu>\r\n  );\r\n}\r\n\r\nfunction BlockArea(): React.ReactElement {\r\n  const state = useAppSelector(blocks);\r\n\r\n  return (\r\n    <div style={{ width: \"90%\", height: \"100%\" }}>\r\n      {state.map((props) => BlockRender(props))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Page(): React.ReactElement {\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  return (\r\n    <Layout>\r\n      <Sider\r\n        className=\"site-layout-background\"\r\n        collapsible\r\n        collapsed={collapsed}\r\n        theme=\"dark\"\r\n        style={{ height: \"100%\", minHeight: \"100%\" }}\r\n        onCollapse={() => setCollapsed(!collapsed)}\r\n      >\r\n        <BlockList />\r\n      </Sider>\r\n      <Layout className=\"site-layout\">\r\n        <Content\r\n          className=\"site-layout-background\"\r\n          style={{\r\n            margin: \"24px 16px\",\r\n            padding: 24,\r\n            minHeight: 280,\r\n          }}\r\n        >\r\n          <BlockArea />\r\n        </Content>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default Page;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport BlocksSlice from \"./BlocksSlice\";\r\nconst store = configureStore({\r\n  reducer: {\r\n    blocks: BlocksSlice,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport BlockPanel from \"./ui/panels/BlockPanel\";\r\nimport store from \"./store/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport \"antd/dist/antd.css\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <BlockPanel />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}