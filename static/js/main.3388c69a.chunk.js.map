{"version":3,"sources":["ui/blocks/operational/value/ValueBlocks.ts","ui/blocks/Block.tsx","store/hooks.ts","store/BlocksSlice.tsx","ui/panels/BlockPanel.tsx","store/store.ts","index.js"],"names":["booleanBlock","value","backgroundColour","displayText","displayTextOffsetX","displayTextOffsetY","displayTextColour","type","TypeBlockRender","props","style","displayStyle","background","block","marginLeft","marginTop","color","BlockRender","useState","xPos","setXPos","yPos","setYPos","left","top","className","onDrag","event","pageX","pageY","console","log","useAppSelector","useSelector","initialState","id","blocksSlice","createSlice","name","reducers","set","state","action","payload","append","remove","filter","actions","blocks","BlockList","mode","theme","title","BlockMenuItem","dispatch","useDispatch","Item","onClick","key","BlockArea","width","height","map","Page","collapsed","setCollapsed","collapsible","minHeight","onCollapse","margin","padding","store","configureStore","reducer","BlocksSlice","ReactDOM","render","StrictMode","BlockPanel","document","getElementById"],"mappings":"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","file":"static/js/main.3388c69a.chunk.js","sourcesContent":["import { ValueBlock } from \"./../../Block\";\r\n\r\nexport function booleanBlock(value: boolean): ValueBlock<boolean> {\r\n  return {\r\n    backgroundColour: \"yellow\",\r\n    displayText: \"\" + value,\r\n    displayTextOffsetX: 0,\r\n    displayTextOffsetY: 0,\r\n    displayTextColour: \"black\",\r\n    type: \"booleanValue\",\r\n    value,\r\n  };\r\n}\r\n","import { Properties } from \"csstype\";\r\nimport React, { useState } from \"react\";\r\n\r\nexport type Block = {\r\n  type: String;\r\n  backgroundColour?: string;\r\n  displayText?: string;\r\n  displayTextColour?: string;\r\n  displayTextOffsetX?: number | string;\r\n  displayTextOffsetY?: number | string;\r\n};\r\n\r\nexport type ValueBlock<V> = Block & {\r\n  value: V;\r\n};\r\n\r\nexport type BlockProps = {\r\n  block: Block;\r\n  id: number;\r\n  style?: Properties;\r\n};\r\n\r\nexport function TypeBlockRender(props: BlockProps) {\r\n  const style = {\r\n    ...props.style,\r\n    displayStyle: \"inline-block\",\r\n    background: props.block.backgroundColour,\r\n  };\r\n  const displayStyle = {\r\n    marginLeft: props.block.displayTextOffsetX,\r\n    marginTop: props.block.displayTextOffsetY,\r\n    color: props.block.displayTextColour,\r\n  };\r\n\r\n  return (\r\n    <div style={style}>\r\n      <p style={displayStyle}>{props.block.displayText}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function BlockRender(props: BlockProps) {\r\n  const [xPos, setXPos] = useState(0);\r\n  const [yPos, setYPos] = useState(0);\r\n  const style = {\r\n    ...props.style,\r\n    left: xPos,\r\n    top: yPos,\r\n    displayStyle: \"inline-block\",\r\n    background: props.block.backgroundColour,\r\n  };\r\n  const displayStyle = {\r\n    marginLeft: props.block.displayTextOffsetX,\r\n    marginTop: props.block.displayTextOffsetY,\r\n    color: props.block.displayTextColour,\r\n  };\r\n\r\n  const onDrag = (event: React.DragEvent<HTMLDivElement>) => {\r\n    if (event.pageX === 0 && event.pageY === 0) {\r\n      return;\r\n    }\r\n    console.log(\"onDrag: \" + event.pageX + \" | \" + event.pageY);\r\n    setXPos(event.pageX);\r\n    setYPos(event.pageY);\r\n  };\r\n\r\n  return (\r\n    <div className={\"absolute-box\"} onDrag={onDrag} style={style}>\r\n      <p style={displayStyle}>{props.block.displayText}</p>\r\n    </div>\r\n  );\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch, RootState } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { BlockProps } from \"../ui/blocks/Block\";\r\nimport { RootState } from \"./store\";\r\nimport { booleanBlock } from \"../ui/blocks/operational/value/ValueBlocks\";\r\n\r\ninterface BlocksState {\r\n  value: BlockProps[];\r\n}\r\n\r\nconst initialState: BlocksState = {\r\n  value: [\r\n    {\r\n      id: 0,\r\n      block: booleanBlock(true),\r\n    },\r\n  ],\r\n};\r\n\r\nexport const blocksSlice = createSlice({\r\n  name: \"blocks\",\r\n  initialState,\r\n  reducers: {\r\n    set: (state, action: PayloadAction<BlockProps[]>) => {\r\n      state.value = action.payload;\r\n    },\r\n    append: (state, action: PayloadAction<BlockProps>) => {\r\n      state.value = [...state.value, action.payload];\r\n    },\r\n    remove: (state, action: PayloadAction<number>) => {\r\n      state.value = state.value.filter((value) => action.payload !== value.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { set, append, remove } = blocksSlice.actions;\r\n\r\nexport const blocks = (state: RootState) => state.blocks.value;\r\n\r\nexport default blocksSlice.reducer;\r\n","import { booleanBlock } from \"../blocks/operational/value/ValueBlocks\";\r\nimport { BlockProps, BlockRender, TypeBlockRender } from \"../blocks/Block\";\r\nimport { Layout, Menu } from \"antd\";\r\nimport Sider from \"antd/lib/layout/Sider\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\nimport SubMenu from \"antd/lib/menu/SubMenu\";\r\nimport { useState } from \"react\";\r\nimport { useAppSelector, useAppDispatch } from \"./../../store/hooks\";\r\nimport { blocks, append } from \"./../../store/BlocksSlice\";\r\n\r\nfunction BlockList(): React.ReactElement {\r\n  return (\r\n    <Menu mode=\"inline\" theme=\"dark\">\r\n      <SubMenu key=\"Value\" title=\"Value\">\r\n        <BlockMenuItem\r\n          id={0}\r\n          key=\"booleanBlock\"\r\n          title=\"true/false\"\r\n          block={booleanBlock(true)}\r\n        />\r\n      </SubMenu>\r\n    </Menu>\r\n  );\r\n}\r\n\r\ntype BlockMenuItemProps = BlockProps & {\r\n  key: string;\r\n  title: string;\r\n};\r\n\r\nfunction BlockMenuItem(props: BlockMenuItemProps) {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <Menu.Item\r\n      key={props.key}\r\n      title={props.title}\r\n      onClick={() => {\r\n        dispatch(append({ ...props }));\r\n      }}\r\n    >\r\n      <TypeBlockRender {...props} />\r\n    </Menu.Item>\r\n  );\r\n}\r\n\r\nfunction BlockArea(): React.ReactElement {\r\n  const state = useAppSelector(blocks);\r\n\r\n  return (\r\n    <div style={{ width: \"90%\", height: \"100%\" }}>\r\n      {state.map((props) => (\r\n        <BlockRender key={props.id} {...props} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Page(): React.ReactElement {\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  return (\r\n    <Layout>\r\n      <Sider\r\n        className=\"site-layout-background\"\r\n        collapsible\r\n        collapsed={collapsed}\r\n        theme=\"dark\"\r\n        style={{ height: \"100%\", minHeight: \"100%\" }}\r\n        onCollapse={() => setCollapsed(!collapsed)}\r\n      >\r\n        <BlockList />\r\n      </Sider>\r\n      <Layout className=\"site-layout\">\r\n        <Content\r\n          className=\"site-layout-background\"\r\n          style={{\r\n            margin: \"24px 16px\",\r\n            padding: 24,\r\n            minHeight: 280,\r\n          }}\r\n        >\r\n          <BlockArea />\r\n        </Content>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default Page;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport BlocksSlice from \"./BlocksSlice\";\r\nconst store = configureStore({\r\n  reducer: {\r\n    blocks: BlocksSlice,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport BlockPanel from \"./ui/panels/BlockPanel\";\r\nimport store from \"./store/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport \"antd/dist/antd.css\";\r\nimport \"./style.css\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <BlockPanel />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}